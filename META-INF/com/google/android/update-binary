#!/sbin/sh
# MC's Charging Controller
# mcc Installer ( 201803061 )
# MCMotherEffin' @ XDA Developers

# Copyright (c) 2018 Jaymin " MCMotherEffin' " Suthar. All rights reserved.

# This file is a part of the project "MC's Charging Controller ( mcc )"

# I MCMotherEffin', hereby declare that "MC's Charging Controller"
## is licensed under the GNU GPL v3 and you are allowed to modify or
## re-distribute it under the terms of the GNU GPL v3 as published by
## the Free Software Foundation or any later version provided that you
## include the above copyright notice and this declaration

# Given the above rights, you are required to inform me
## if you re-distribute it ( wherever you do, it is public )
## you should do so by sending me a Private Message at xda-developers.com

# Finally, you should obtain a copy of the GNU GPL v3 from <http://gnu.org/licenses/>

# Abort for this cases
if grep '^/sbin/sh' </proc/$$/cmdline >/dev/null; then
    fd=/proc/self/fd/$2;

    ui_print() { echo -e "ui_print $1\nui_print" >>$fd; };

    ui_print ' ';  ui_print ' ';
    ui_print '- Abort :- Please install in boot mode';
    ui_print ' ';  ui_print ' ';
    exit 1;
elif [ $(magisk -V) -lt 1400 ]; then
    echo -e "\n\nAbort :- Please install Magisk >= 1400\n"; exit 1;
fi;
echo -e "\n\n";

# Define universal functionals
zip_file="$3";

abort() { echo -e "- Abort :- $1\n"; exit 1; };

# Find BusyBox, Magisk mountpoint and set BusyBox applets up
system=/system; if [ -d /system_root ]; then system=/system_root/system; fi;
for magisk_bb in $(find /data -type f -name busybox | grep /magisk/busybox$;); do
    if $magisk_bb | grep 'topjohnwu ' >/dev/null; then
        image=${magisk_bb%/*/*}/magisk.img;
        if [ -f $image ]; then
            for loop_device in /dev/block/loop*; do
                if $magisk_bb losetup $loop_device | grep " $image$" >/dev/null; then
                    for real_mount_point in $(grep "^$loop_device " /proc/mounts | $magisk_bb awk '{ print $2 }' | grep -Ev "^$system|^/vendor";); do
                        if grep ^com.google.android.gms.unstable$ $real_mount_point/.core/hidelist >/dev/null; then
                            break 3;
                        fi;
                        unset real_mount_point;
                    done;
                fi;
            done;
        fi;
    fi;
    unset magisk_bb;
done;
if [ -z $magisk_bb -o -z $real_mount_point ]; then
    abort 'Could not set environment based on Magisk';
fi;
tmp_dir=/dev/mcc_tmp;
tmp_bin=$tmp_dir/busybox;
rm -rf $tmp_bin; mkdir -p $tmp_bin;
$magisk_bb --install -s $tmp_bin/;
export PATH=$tmp_bin:$PATH;

# Print module banner
echo -e "------------------------------------------------\n";
echo -e "     MC's Charging Controller\n";
echo -e "         by MCMotherEffin' @ XDA Developers\n";
echo -e "------------------------------------------------\n\n\n";

# Test compatibility and set references
## see the Main Script for documentation
echo -e "- Please make sure the device is charging\n";
sleep 5;
echo -e "- Checking compatibility...\n";
tmp_file=$tmp_dir/cached;
find -L /sys/class /sys/devices /sys/module -type f -name uevent | grep -E '[Bb]att|[Cc]harg' >$tmp_file;

is_charging() { grep -q ^POWER_SUPPLY_STATUS=[Cc]harging$ $uevent; };

while read uevent; do
    chmod u+r $uevent;
    if grep -q ^POWER_SUPPLY_NAME=.*[Bb]att.*$ $uevent && is_charging; then
        i=1;
        for ref in ${uevent%/*}/*; do
            if [[ -f $ref ]]; then
                if ! ls -l $ref | awk '{ print $1 }' | grep -q w; then
                    continue;
                fi;
            else
                continue;
            fi; chmod u+r $ref;
            case $(cat $ref) in
                1       ) c_ON=1;        c_OFF=0;        ;;
                0       ) c_ON=0;        c_OFF=1;        ;;
                on      ) c_ON=on;       c_OFF=off;      ;;
                off     ) c_ON=off;      c_OFF=on;       ;;
                true    ) c_ON=true;     c_OFF=false;    ;;
                false   ) c_ON=false;    c_OFF=true;     ;;
                enable  ) c_ON=enable;   c_OFF=disable;  ;;
                disable ) c_ON=disable;  c_OFF=enable;   ;;
                enabled ) c_ON=enabled;  c_OFF=disabled; ;;
                disabled) c_ON=disabled; c_OFF=enabled;  ;;
                *       ) continue;                      ;;
            esac;
            echo $c_OFF >$ref; usleep 100000;
            if ! is_charging; then
                echo $c_ON >$ref; usleep 100000;
                if is_charging; then
                    eval switches_$i=\"$ref $c_ON $c_OFF\"; let i++;
                    if [[ $i -eq 3 ]]; then break 2; fi;
                fi;
            fi;
            echo $c_ON >$ref;
        done;
        if [[ $i -gt 1 ]]; then break; fi;
    fi;
done <$tmp_file;
if [[ $i -eq 1 ]]; then
    abort 'Your device does not support these functionalities';
fi;
echo -e "- OK\n\n\n";

# Get image ready and mounted for un-installation
image=${image%/*}/magisk_merge.img;
if [[ -f $image ]]; then
    echo -e "- $image exists\n";

    imgsize_test() {
        e2fsck -n $image | grep -Eo '[0-9]+/[0-9]+ blocks' | cut -d/ -f$1 | awk '{ print int(($1 + 255) / 256) }';
    };

    e2fsck -pf $image >&2;
    img_total=$(imgsize_test 2);
    if [[ $(imgsize_test 1) -eq $img_total ]]; then
        echo -e "- Expanding $image...\n";
        resize2fs $image $((img_total + 32))M;
    fi;
else
    echo -e "- Creating $image...\n";
    make_ext4fs -l 64M $image >&2;
fi;
echo -e "- Mounting $image...\n";
mount_point=/dev/mcc_img;
mkdir $mount_point;

is_mounted() { grep -q " $mount_point " /proc/mounts; };

for minor in $(seq -s ' ' 7;); do
    loop_device=/dev/block/loop$minor;
    if [[ ! -b $loop_device ]]; then mknod $loop_device b 7 $minor; fi;
    if losetup $loop_device $image; then
        mount -t ext4 -o rw,noatime $loop_device $mount_point;
    fi;
    if is_mounted; then break; fi;
done;
if ! is_mounted; then abort "Could not mount $image"; fi;

# Proceed to un-installation
mod_dir=$mount_point/mcc; inst_mod_dir=$real_mount_point/mcc;

get_prop() { sed -n s/^$1=//p $2; };

which_installed() { get_prop versionCode $inst_mod_dir/module.prop || echo 0; };

if [[ $(get_prop versionCode $mod_dir/module.prop || which_installed;) -ge 201803061 ]]; then

    # Uninstall
    echo -e "- Same or newer already installed\n";
    echo -e "- Attention :- Cleaning installation...\n";
    rm -rf $mod_dir $inst_mod_dir /cache/mcc_e*.log;
    kill $(ps | grep -v ' grep ' | grep ' {mcc} ' | awk '{ print $1 }' | tr '\n' ' ';);
    if inst_mcc=$(ls $system/xbin/mcc || ls $system/bin/mcc;); then
        if [[ $(magisk -V) -ge 1410 ]]; then
            umount $inst_mcc; rm -f $inst_mcc; umount ${inst_mcc%/*};
        fi;
    fi;
else

    # Install
    rm -rf $mod_dir; mkdir -p $mod_dir/docs $mod_dir/cache;
    echo -e "- Extracting module files...\n";
    unzip -o "$zip_file" 'system/*' mcc.conf service.sh module.prop -d $mod_dir >&2;
    unzip -o "$zip_file" README.md -d $mod_dir/docs >&2;
    bin_dir=$mod_dir/system/xbin;
    if [[ ! -d $system/xbin ]]; then
        mv $bin_dir $mod_dir/system/bin; bin_dir=$mod_dir/system/bin;
    fi;

    set_prop() { sed -i "s|^$1=.*|$1=$2|g" $mod_dir/mcc.conf; };

    if [[ $(which_installed) -ge 201802251 ]]; then
        if old_conf=$(ls $inst_mod_dir/mcc.conf;); then

            echo -e "- Restoring configurations...\n";
            for prop in auto_shut auto_switch daemon_mode up_threshold down_threshold shut_threshold; do
                set_prop $prop $(get_prop $prop $old_conf);
            done;
        fi;
    fi;
    set_prop uevent $uevent;
    for i in 1 2; do
        switch="$(eval echo \$switch_$i;)";
        case $switch in
            '') break;                        ;;
            * ) set_prop switch_$i "$switch"; ;;
        esac;
    done;
    touch $mod_dir/auto_mount;
    mkdir $inst_mod_dir;
    touch $inst_mod_dir/update;
    cp -f $mod_dir/module.prop $inst_mod_dir;

    set_perm_recursive() {
        find $1 | while read entry; do
            chown 0:$2 $entry;
            if [[ ! -d $entry ]]; then
                chmod $3 $entry;
            else
                chmod 0755 $entry;
            fi;
            chcon u:object_r:system_file:s0 $entry;
        done;
    };

    echo -e "- Setting permissions...\n";
    set_perm_recursive $mod_dir    0 0644;
    set_perm_recursive $bin_dir 2000 0755;
fi;

# Finalize
umount $mount_point; losetup -d $loop_device;
rmdir $mount_point; rm -rf $tmp_dir;
echo -e "- Done\n\n\n";
exit 0;
